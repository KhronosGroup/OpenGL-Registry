Name

    MESA_EGL_image_cubemap

Name Strings

    GL_MESA_EGL_image_cubemap

Contact

    Simon Zeni, Status Holdings Ltd. <simon@zeni.ca>

Contributors

    Simon Zeni

Status

    Draft

Version

    Version 0.1, 2022/08/05

Number

    OpenGL ES Extension #546

Dependencies

    OpenGL ES 2.0 is required, or any previous version that offers support
    for GL_ARB_texture_cube_map extension

    GL_OES_EGL_image is required.

    EGL 1.2 is required, with the EGL_KHR_image or EGL_KHR_image_base

    This extension is written based on the wording of the OpenGL 2.0

Overview

    This extension provides a mechanism for creating cubemap textures from
    EGLImage objects.

    MESA_gl_texture_cubemap_image defines the process of creating an EGLImage
    from an OpenGL ES cubemap texture.

    The companion EGL_KHR_image_base and EGL_KHR_image extensions provide the
    definition and rationale for EGLImage objects.

    EGL extension specifications are located in the EGL Registry at
            http://www.khronos.org/registry/egl/

New Tokens

    None.

New Procedures and Functions

    void EGLImageTargetCubemapMESA(enum target, eglImageOES image)

Additions to Chapter 3 of the OpenGL 2.0 Specification (Rasterization)

    In section 3.8.2 following the specification added by OES_EGL_image:

    "It is also possible to specify cubemap textures images from existing
    EGLImage objects. Images specified this way will be EGLImage sibilings
    with the original EGLImage source and any other EGLImage targets.

    The command

        void EGLImageTargetCubemapMESA(enum target, eglImageOES image);

    defines an complete cubemap texture with 6 faces. All properties of the
    texture images (including width, height, format, border, mipmap levels of
    detail, and image data) are taken from the specified eglImageOES <image>,
    rather than from the client or the framebuffer.  Any existing image arrays
    associated with any mipmap levels in the texture object are freed (as if
    TexImage was called for each, with an image of zero size). As a result of
    this referencing operation, all of the pixel data in the <buffer> used as
    the EGLImage source resource (i.e., the <buffer> parameter passed to the
    CreateImageOES command that returned <image>) will become undefined.

    <target> must be TEXTURE_CUBE_MAP, and <image> must be the handle of a
    valid EGLImage resource, cast into the type eglImageOES. Assuming no
    errors are generated by the command EGLImageTargetCubemapMESA, the newly
    specified texture object will be an EGLImage target of the specified
    eglImageOES. If an application later respecifies any face of the cubemap
    texture object (through mechanism such as calls to TexImage2D or
    TexSubImage2D), the implementation must allocate a new space for the image
    and copy any existing data to the newly (re)specified texture object. The
    (re)specified texture object will not be an EGLImage target.

    If the GL is unable to specify a texture object using the supploed
    eglImageOES <image> (if the <image> refers to a different type of image,
    such as a TEXTURE_2D), the error INVALID_OPERATION is generated.

    If <image> does not refer to a valid eglImageOES object, the error
    INVALID_VALUE is generated.

    If <target> is not TEXTURE_CUBE_MAP, the error INVALID_ENUM is generated.

Revision History

    Version 0.1, 2022-08-05 (Simon Zeni)
            - Initial draft
